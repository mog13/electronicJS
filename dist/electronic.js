function Gate(t,n,i){if(this.name=t,this.inputs=[],this.outputs=i||[],n)for(var e=0,o=n.length;o>e;e++)this.addInput(n[e]);this.update()}function Wire(t,n,i){this.name=n,this.connections=i||[],this.value=t||0}function DigIO(t,n,i,e){this.name=i,this.connections=e||[],this.value=t||0,this.threshold=void 0===n?.5:n}function HalfAdder(t){this.a=new DigIO(0,.5,"a"),this.b=new DigIO(0,.5,"b"),this.sum=new DigIO(0,.5,"sum"),this.carry=new DigIO(0,.5,"carry"),this.xor=new XOR("xor1",2,1),this.and=new AND("and1",2,1),Connect(this.a,this.xor.IPin(0)),Connect(this.b,this.xor.IPin(1)),Connect(this.a,this.and.IPin(0)),Connect(this.b,this.and.IPin(1)),Connect(this.xor.OPin(0),this.sum),Connect(this.and.OPin(0),this.carry)}function genericMultiGate(t,n,i){for(var e=[],o=0;n>o;o++)e.push(new DigIO(0,.5,t+" Ipin "+o));for(var s=[],u=0;i>u;u++)s.push(new DigIO(0,.5,t+" Opin "+u));Gate.call(this,t,e,s)}function AND(t,n,i){genericMultiGate.call(this,t,n,i)}function NAND(t,n,i){genericMultiGate.call(this,t,n,i)}function OR(t,n,i){genericMultiGate.call(this,t,n,i)}function XOR(t,n,i){genericMultiGate.call(this,t,n,i)}function NOT(t){Gate.call(this,t,[new DigIO],[new DigIO])}function AND2(t){Gate.apply(this,[t,[new DigIO,new DigIO],[new DigIO]])}function OR2(t){OR.call(this,2,1)}function DTypeFlipFlop(t){this.clk=new DigIO(0,.5,"clk"),this.D=new DigIO(0,.5,"D"),this.Q=new DigIO(0,.5,"Q"),this.NQ=new DigIO(1,.5,"!Q"),this.Nands=[new NAND("nand1",2,1),new NAND("nand2",2,1),new NAND("nand3",2,1),new NAND("nand4",2,1)],this.inv=new NOT("not1",1,1),Connect(this.Nands[0].OPin(0),this.Nands[1].IPin(0)),Connect(this.Nands[1].OPin(0),this.Nands[2].IPin(0)),Connect(this.Nands[2].OPin(0),this.Nands[1].IPin(1)),Connect(this.Nands[3].OPin(0),this.Nands[2].IPin(1)),Connect(this.clk,this.Nands[0].IPin(1)),Connect(this.clk,this.Nands[3].IPin(0)),Connect(this.D,this.Nands[0].IPin(0)),Connect(this.D,this.inv.IPin(0)),Connect(this.inv.OPin(0),this.Nands[3].IPin(1)),Connect(this.Nands[1].OPin(0),this.Q),Connect(this.Nands[2].OPin(0),this.NQ)}var Connect=function(t,n){t.addConnection(n.set,n)};Gate.prototype.update=function(){},Gate.prototype.addInput=function(t){t.addConnection(this.update,this),this.inputs.push(t)},Gate.prototype.addOutput=function(t){this.outputs.push(t)},Gate.prototype.setInput=function(t,n){this._getPin(t,this.inputs).set(n)},Gate.prototype.setOutput=function(t,n){this._getPin(t,this.outputs).set(n)},Gate.prototype.getOutput=function(t){return this._getPin(t,this.outputs).value},Gate.prototype.getInput=function(t){return this._getPin(t,this.inputs).value},Gate.prototype.getOutputPin=function(t){return this._getPin(t,this.outputs)},Gate.prototype.getInputPin=function(t){return this._getPin(t,this.inputs)},Gate.prototype.OPin=Gate.prototype.getOutputPin,Gate.prototype.IPin=Gate.prototype.getInputPin,Gate.prototype._getPin=function(t,n){return"string"==typeof t?this._getPinFromString(t,n):this._getPinFromNumber(t,n)},Gate.prototype._getPinFromString=function(t,n){for(var i=0,e=n.length;e>i;i++)if(n[i].name==t)return n[i];throw"could not find pin named: "+t},Gate.prototype._getPinFromNumber=function(t,n){if(t<n.length)return n[t];throw"could not find pin numbered: "+t},Wire.prototype.set=function(t){var n=this.value;return this.value=t,this.value!==n&&this.update(),this.value},Wire.prototype.addConnection=function(t,n){n=n||null,this.connections.push({callback:t,scope:n})},Wire.prototype.addConnections=function(t){for(var n=[],i=0,e=t.length;e>i;i++)if(void 0===t[i].callback){var o={callback:t[i],scope:null};n.push(o)}else n.push(t[i]);this.connections=this.connections.concat(n)},Wire.prototype.clearConnections=function(){this.connections=[]},Wire.prototype.update=function(){if(this.connections)for(var t=0,n=this.connections.length;n>t;t++)this.connections[t].callback.call(this.connections[t].scope,this.value)},Wire.prototype.toString=function(){var t=this.name?"("+this.name+")":"";return"<wire"+t+":"+this.value+">"},DigIO.prototype=new Wire,DigIO.prototype.set=function(t){var n=this.value;return this.value=t>this.threshold?1:0,this.value!==n&&this.update(),this.value},genericMultiGate.prototype=new Gate,AND.prototype=new Gate,AND.prototype.update=function(){for(var t=1,n=0,i=this.inputs.length;i>n;n++)1!==this.inputs[n].value&&(t=0);for(var e=0,i=this.outputs.length;i>e;e++)this.setOutput(e,t)},NAND.prototype=new Gate,NAND.prototype.update=function(){for(var t=1,n=0,i=this.inputs.length;i>n;n++)1!==this.inputs[n].value&&(t=0);for(var e=0,i=this.outputs.length;i>e;e++)this.setOutput(e,1-t)},OR.prototype=new Gate,OR.prototype.update=function(){for(var t=0,n=0,i=this.inputs.length;i>n;n++)1==this.inputs[n].value&&(t=1);for(var e=0,i=this.outputs.length;i>e;e++)this.setOutput(e,t)},XOR.prototype=new Gate,XOR.prototype.update=function(){for(var t=1,n=0,i=0,e=this.inputs.length;e>i;i++)1==this.inputs[i].value?n=1:t=0;for(var o=0,e=this.outputs.length;e>o;o++)this.setOutput(o,!t&&n)},NOT.prototype=new Gate,NOT.prototype.update=function(){this.setOutput(0,1-this.getInput(0))},AND2.prototype=new Gate,AND2.prototype.update=function(){this.setOutput(0,this.getInput(1)&&this.getInput(0))},OR2.prototype=new OR;